--- xserver-xlibre-xserver-25.0.0.8/hw/xfree86/parser/OutputClass.c.orig	2025-08-18 18:26:03.736851815 +0300
+++ xserver-xlibre-xserver-25.0.0.8/hw/xfree86/parser/OutputClass.c	2025-08-18 18:26:03.746851815 +0300
@@ -42,6 +42,7 @@
     {MODULEPATH, "modulepath"},
     {OPTION, "option"},
     {MATCH_DRIVER, "matchdriver"},
+    {MATCH_LAYOUT, "matchlayout"},
     {-1, ""},
 };
 
@@ -58,6 +59,8 @@
         TestFree(ptr->modulepath);
 
         xf86freeMatchGroupList(&ptr->match_driver);
+        xf86freeMatchGroupList(&ptr->match_layout);
+
         xf86optionListFree(ptr->option_lst);
 
         prev = ptr;
@@ -140,6 +143,16 @@
                 free(xf86_lex_val.str);
             }
             break;
+        case MATCH_LAYOUT:
+            if (xf86getSubToken(&(ptr->comment)) != XF86_TOKEN_STRING)
+                Error(QUOTE_MSG, "MatchLayout");
+            else {
+                group = xf86createMatchGroup(xf86_lex_val.str, MATCH_EXACT, FALSE);
+                if (group)
+                    xorg_list_add(&group->entry, &ptr->match_layout);
+                free(xf86_lex_val.str);
+            }
+            break;
         case EOF_TOKEN:
             Error(UNEXPECTED_EOF_MSG);
             break;
@@ -184,6 +197,16 @@
             not_first = FALSE;
             xorg_list_for_each_entry(pattern, &group->patterns, entry) {
                 xf86printMatchPattern(cf, pattern, not_first);
+                not_first = TRUE;
+            }
+            fprintf(cf, "\"\n");
+        }
+
+        xorg_list_for_each_entry(group, &ptr->match_layout, entry) {
+            fprintf(cf, "\tMatchLayout     \"");
+            not_first = FALSE;
+            xorg_list_for_each_entry(pattern, &group->patterns, entry) {
+                xf86printMatchPattern(cf, pattern, not_first);
                 not_first = TRUE;
             }
             fprintf(cf, "\"\n");
--- xserver-xlibre-xserver-25.0.0.8/hw/xfree86/parser/xf86Parser.h.orig	2025-08-18 18:26:03.736851815 +0300
+++ xserver-xlibre-xserver-25.0.0.8/hw/xfree86/parser/xf86Parser.h	2025-08-18 18:26:03.747851815 +0300
@@ -362,6 +362,7 @@
     char *modules;
     char *modulepath;
     struct xorg_list match_driver;
+    struct xorg_list match_layout;
     XF86OptionPtr option_lst;
     char *comment;
 } XF86ConfOutputClassRec, *XF86ConfOutputClassPtr;
--- xserver-xlibre-xserver-25.0.0.8/hw/xfree86/man/xorg.conf.man.orig	2025-08-18 19:30:55.286715993 +0300
+++ xserver-xlibre-xserver-25.0.0.8/hw/xfree86/man/xorg.conf.man	2025-08-18 19:51:18.798673290 +0300
@@ -1290,20 +1290,38 @@
 .B Driver
 entry will be enabled when using the loadable server.
 .PP
-When an output device is automatically added, its characteristics are
+When an output device is automatically added, its characteristics and the active layout are
 checked against all
 .B OutputClass
 sections.
 Each section can contain optional entries to narrow the match of the class.
+.RE
+.TP 7
+.BI "MatchDriver \*q" matchdriver \*q
+Check the case-sensitive string
+.RI \*q matchdriver \*q
+against the kernel driver of the device.
+.RE
+.TP 7
+.BI "MatchLayout \*q" matchlayout \*q
+Check the case-sensitive string
+.RI \*q matchlayout \*q
+against the currently active
+.B ServerLayout
+section or against
+.RI \*q\*q
+, if no named
+.B ScreenLayout
+sections are present.
+.PP
 If none of the optional entries appear, the
 .B OutputClass
 section is generic and will match any output device.
 If more than one of these entries appear, they all must match for the
 configuration to apply.
 .PP
-The following list of tokens can be matched against attributes of the device.
-An entry can be constructed to match attributes from different devices by
-separating arguments with a '|' character.
+An entry can be constructed to match attributes from different devices or
+different screen layouts by separating arguments with a '|' character.
 .PP
 For example:
 .PP
@@ -1313,15 +1331,12 @@
 .B  "    Identifier   \*qMy Class\*q"
 .B  "    # kernel driver must be either foo or bar"
 .B  "    MatchDriver \*qfoo\^|\^bar\*q"
+.B  "    # active layout must be either Seat1 or implicit"
+.B  "    MatchLayout \*qSeat1|\*q"
 .I  "    \&.\|.\|.\&"
 .B  EndSection
 .fi
 .RE
-.TP 7
-.BI "MatchDriver \*q" matchdriver \*q
-Check the case-sensitive string
-.RI \*q matchdriver \*q
-against the kernel driver of the device.
 .PP
 When an output device has been matched to the
 .B OutputClass
@@ -1462,7 +1477,7 @@
 .RE
 .PP
 entries, which are quite equivalent to
-.B Device
+.B Driver
 except that
 .I \*qmodule\*q
 is not added to the list of autoconfigured video drivers. This may be useful to extend
--- xserver-xlibre-xserver-25.0.0.8/hw/xfree86/common/xf86platformBus.c.orig	2025-08-18 18:26:03.730851815 +0300
+++ xserver-xlibre-xserver-25.0.0.8/hw/xfree86/common/xf86platformBus.c	2025-08-18 18:26:03.747851815 +0300
@@ -182,10 +182,23 @@
                    struct xf86_platform_device *dev)
 {
     char *driver = dev->attribs->driver;
+    const char *layout;
 
     if (!MatchAttrToken(driver, &oclass->match_driver))
         return FALSE;
 
+    /* MatchLayout string
+     *
+     * If no Layout section is found, xf86ServerLayout.id becomes "(implicit)"
+     * It is convenient that "" in patterns means "no explicit layout"
+     */
+    if (strcmp(xf86ConfigLayout.id,"(implicit)"))
+        layout = xf86ConfigLayout.id;
+    else
+        layout = "";
+    if (!MatchAttrToken(layout, &oclass->match_layout))
+            return FALSE;
+
     return TRUE;
 }
 
