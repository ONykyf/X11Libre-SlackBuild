From 0f6eaa096528d4c2e7232f95e742504296b49fa5 Mon Sep 17 00:00:00 2001
From: Oleh Nykyforchyn <oleh.nyk@gmail.com>
Date: Sat, 9 Aug 2025 18:26:57 +0300
Subject: [PATCH 2/4] xserver: hw/xfree86/common: introduce option IgnoreABI
 for OutputClass

It is patch 2/4 of a series that provides a convenient way to specify
IgnoreABI on a per-driver basis.

This patch allows to create an OutputClass that applies IgnoreABI option
to devices depending on the driver in use.

Signed-off-by: Oleh Nykyforchyn <oleh.nyk@gmail.com>
---
 hw/xfree86/common/xf86Init.c        |  2 +
 hw/xfree86/common/xf86platformBus.c | 13 +++++
 hw/xfree86/loader/loader.c          | 75 ++++++++++++++++++++++++++++-
 hw/xfree86/loader/loaderProcs.h     |  1 +
 4 files changed, 89 insertions(+), 2 deletions(-)

diff --git a/hw/xfree86/common/xf86Init.c b/hw/xfree86/common/xf86Init.c
index e891e9009..b39e099f0 100644
--- a/hw/xfree86/common/xf86Init.c
+++ b/hw/xfree86/common/xf86Init.c
@@ -749,6 +749,8 @@ CloseInput(void)
 {
     config_fini();
     mieqFini();
+    /* strictly speaking the below is not related to input, but ... */
+    LoaderClose();
 }
 
 /*
diff --git a/hw/xfree86/common/xf86platformBus.c b/hw/xfree86/common/xf86platformBus.c
index a5585b884..002f385f0 100644
--- a/hw/xfree86/common/xf86platformBus.c
+++ b/hw/xfree86/common/xf86platformBus.c
@@ -273,6 +273,7 @@ xf86platformProbe(void)
     }
 
     for (i = 0; i < xf86_num_platform_devices; i++) {
+        struct xf86_platform_device *dev = &xf86_platform_devices[i];
         char *busid = xf86_platform_odev_attributes(i)->busid;
 
         if (pci && busid && (strncmp(busid, "pci:", 4) == 0)) {
@@ -296,6 +297,18 @@ xf86platformProbe(void)
                                cl->identifier, path);
                 LoaderSetPath(path);
             }
+
+            if (xf86CheckBoolOption(cl->option_lst, "IgnoreABI", FALSE)) {
+                if (cl->driver) {
+                    LogMessageVerb(X_CONFIG, 1, "OutputClass \"%s\" sets %s to ignore ABI for \"%s\" managed by %s\n",
+                               cl->identifier, cl->driver, dev->attribs->path, dev->attribs->driver);
+                    LoaderSetIgnoreABI(cl->driver);
+                } else {
+                    LogMessageVerb(X_CONFIG, 1, "OutputClass \"%s\" requires to ignore ABI for \"%s\" managed by %s\n"
+                            "   but Option \"Driver\" is not set\n",
+                            cl->identifier, dev->attribs->path, dev->attribs->driver);
+                }
+            }
         }
     }
 
diff --git a/hw/xfree86/loader/loader.c b/hw/xfree86/loader/loader.c
index 722025322..d91613f4f 100644
--- a/hw/xfree86/loader/loader.c
+++ b/hw/xfree86/loader/loader.c
@@ -52,6 +52,7 @@
 
 #include <string.h>
 #include "os.h"
+#include "list.h"
 #include "loader.h"
 #include "loaderProcs.h"
 
@@ -68,12 +69,24 @@
 extern void *xorg_symbols[];
 #endif
 
+/* ABI versions for all modules are ignored */
 Bool LoaderIgnoreAllABI;
+/* ABI version for a currently loaded module is ignored */
 Bool LoaderIgnoreABI;
 #ifdef LEGACY_NVIDIA_PADDING
+/* Legacy proprietary nvidia drivers need hacks */
 Bool is_nvidia_proprietary;
 #endif /* LEGACY_NVIDIA_PADDING */
 
+/* ABI for a module with this canonical name is ignored */
+typedef struct {
+    struct xorg_list entry;
+    char * name;
+} LoaderIgnoreABIItem;
+
+/* List of such modules */
+struct xorg_list LoaderIgnoreABIList;
+
 void
 LoaderInit(void)
 {
@@ -96,8 +109,21 @@ LoaderInit(void)
     LoaderIgnoreAllABI = FALSE;
     LoaderIgnoreABI = FALSE;
 #ifdef LEGACY_NVIDIA_PADDING
     is_nvidia_proprietary = FALSE;
 #endif /* LEGACY_NVIDIA_PADDING */
+
+    xorg_list_init(&LoaderIgnoreABIList);
+}
+
+void
+LoaderClose(void)
+{
+    LoaderIgnoreABIItem *item, *next;
+    xorg_list_for_each_entry_safe(item, next, &LoaderIgnoreABIList, entry) {
+        xorg_list_del(&item->entry);
+        free(item->name);
+        free(item);
+    }
 }
 
 /* Public Interface to the loader. */
@@ -155,25 +181,70 @@ LoaderUnload(const char *name, void *handle)
         dlclose(handle);
 }
 
+/*
+ * The functions below are necessary to load some modules, e.g., nvidia proprietary drivers,
+ * regardless of their ABI versions
+ */
+
+
+/* ABI versions for all modules will be ignored */
 void
 LoaderSetIgnoreAllABI(void)
 {
     LoaderIgnoreAllABI = TRUE;
 }
 
+/* Check whether ABI for a currently loaded module is ignored and set the flag respectively */
 Bool
 LoaderGetAndFlagIgnoreABI(const char *name)
 {
-    if (LoaderIgnoreAllABI)
+    LoaderIgnoreABIItem *item;
+
+    if (LoaderIgnoreAllABI) {
         LoaderIgnoreABI = TRUE;
-    return LoaderIgnoreABI;
+        return TRUE;
+    }
+
+    xorg_list_for_each_entry(item, &LoaderIgnoreABIList, entry) {
+        if (!strcmp(item->name, name)) {
+            LoaderIgnoreABI = TRUE;
+            return TRUE;
+        }
+    }
+
+    LoaderIgnoreABI = FALSE;
+    return FALSE;
 }
 
+/* Add the module with this name to the list of modules with ignored ABI */
 void
 LoaderSetIgnoreABI(const char *name)
 {
+    LoaderIgnoreABIItem *item;
+
+    if (LoaderIgnoreAllABI)
+        return;
+
+    xorg_list_for_each_entry(item, &LoaderIgnoreABIList, entry) {
+        if (!strcmp(item->name, name))
+            goto out;
+    }
+
+    item = malloc(sizeof(LoaderIgnoreABIItem));
+    if (item)
+        item->name = strdup(name);
+    if (item && item->name)
+        xorg_list_add(&item->entry, &LoaderIgnoreABIList);
+    else {
+        LogMessage(X_ERROR, "Failed to allocate memory to store ignore ABI for module %s\n", name);
+        if (item)
+            free(item);
+    }
+
+  out:
 }
 
+/* These two functions are called by legacy nvidia drivers */
 Bool
 LoaderShouldIgnoreABI(void)
 {
diff --git a/hw/xfree86/loader/loaderProcs.h b/hw/xfree86/loader/loaderProcs.h
index 964169d60..799f0ed34 100644
--- a/hw/xfree86/loader/loaderProcs.h
+++ b/hw/xfree86/loader/loaderProcs.h
@@ -69,6 +69,7 @@ typedef struct module_desc {
 /* External API for the loader */
 
 void LoaderInit(void);
+void LoaderClose(void);
 
 ModuleDescPtr LoadModule(const char *, void *, const XF86ModReqInfo *, int *);
 ModuleDescPtr DuplicateModule(ModuleDescPtr mod, ModuleDescPtr parent);
-- 
2.47.1

