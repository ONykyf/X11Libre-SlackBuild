name: Build XLibre packages for Slackware 15.0

on:
  push:
    branches:
      - main
permissions:
  contents: write
jobs:
  push_container:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock:ro
    container:
      image: aclemons/slackware:15.0-full
    steps:
      - uses: actions/checkout@v5
      - name: Download testing and extra packages
        run: |
          mkdir testing && cd testing
          wget --quiet --show-progress --progress=bar:force:noscroll -r -np -nd --accept libdrm*.t?z,libva*.t?z,mesa*.t?z --no-check-certificate https://mirrors.slackware.com/slackware/slackware64-15.0/testing/packages/ 2>&1 | grep -E -v "(index\.html|robots\.txt)"
          cd ..
          mkdir extra && cd extra
          wget --quiet --show-progress --progress=bar:force:noscroll -r -np -nd --accept=llvm-20*.t?z --no-check-certificate https://mirrors.slackware.com/slackware/slackware64-15.0/extra/ 2>&1 | grep -E -v "(index\.html|robots\.txt)"
          cd ..
      - name: Upgrade packages
        run: |
          upgradepkg --reinstall testing/*
          upgradepkg extra/*
      - name: Build XLibre packages
        # It would be better to not assign ownership of the directory to the root user... But root is needed
        # to upgrade the system packages needed to build XLibre.
        run: |
          chown -R root:users $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE
          chmod +x x11libre.SlackBuild
          ./x11libre.SlackBuild
          cd ..
      - name: Generate blacklist file
        run: |
          mkdir build_artifacts
          BLACKLIST_FILE=build_artifacts/blacklist $GITHUB_WORKSPACE/generate_slackpkg_blacklist.sh
          cat << EOF >> build_artifacts/blacklist
          libva
          mesa
          libdrm
          llvm
          spirv-llvm-translator
          EOF
      - name: Collect build artifacts
        run: |
          cp -v -t build_artifacts /tmp/x11-build/*.t?z testing/* extra/*
      - uses: actions/upload-artifact@v4
        with:
          name: CI Build
          path:
            build_artifacts
      - name: Get short commit hash with date and time
        id: git_short_hash_and_release_date
        run: |
          echo "commit_hash=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
          echo "release_date=$(date +'%Y.%m.%d-%H.%M')" >> "$GITHUB_OUTPUT"
      - name: Create release tag
        id: create_tag
        env:
          RELEASE_DATE: ${{ steps.git_short_hash_and_release_date.outputs.release_date }}
        run: |
          git tag $RELEASE_DATE
          git push origin $RELEASE_DATE
      - name: Generate release tarball
        id: generate_release_tarball
        env:
          COMMIT_HASH: ${{ steps.git_short_hash_and_release_date.outputs.commit_hash }}
          RELEASE_DATE: ${{ steps.git_short_hash_and_release_date.outputs.release_date }}
        run: |
          tar -v -c -z -f "XLibre-Slackware-15-$(uname -m)-$RELEASE_DATE-$COMMIT_HASH.tar.gz" build_artifacts/*
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.git_short_hash_and_release_date.outputs.release_date }}
          name: ${{ steps.git_short_hash_and_release_date.outputs.release_date }}
          artifacts: "*.tar.gz"
          body: "Release generated with GitHub Actions"
